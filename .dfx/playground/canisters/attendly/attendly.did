type Teacher = 
 record {
   address: text;
   birthDate: text;
   branchName: text;
   departmentCode: text;
   firstName: text;
   gender: text;
   id: text;
   lastName: text;
   middleName: opt text;
 };
type Student = 
 record {
   address: text;
   birthDate: text;
   branchName: text;
   departmentCode: text;
   firstName: text;
   gender: text;
   id: text;
   lastName: text;
   middleName: opt text;
   parentsEmail: text;
   points: float64;
   programCode: text;
   sectionCode: text;
 };
type Result_4 = 
 variant {
   err: MessageResult;
   ok: MessageResult;
 };
type Result_3 = 
 variant {
   err: MessageResult;
   ok: record {
         id: text;
         message: text;
       };
 };
type Result_2 = 
 variant {
   err: MessageResult;
   ok: record {
         profile: Teacher;
         role: text;
       };
 };
type Result_1 = 
 variant {
   err: MessageResult;
   ok: Student;
 };
type Result = 
 variant {
   err: MessageResult;
   ok: Teacher;
 };
type MessageResult = record {message: text;};
type CreateTeacherPayload = 
 record {
   address: text;
   birthDate: text;
   branchName: text;
   departmentCode: text;
   firstName: text;
   gender: text;
   id: opt text;
   lastName: text;
   middleName: opt text;
 };
type CreateStudentPayload = 
 record {
   address: text;
   birthDate: text;
   branchName: text;
   departmentCode: text;
   firstName: text;
   gender: text;
   id: opt text;
   lastName: text;
   middleName: opt text;
   parentsEmail: text;
   programCode: text;
   sectionCode: text;
 };
type Attendance = 
 record {
   hashed: text;
   serialized: text;
   studentId: text;
 };
service : {
  createAttendance: (Attendance) -> (Result_4);
  createStudent: (CreateStudentPayload) -> (Result_3);
  createTeacher: (CreateTeacherPayload) -> (Result_3);
  getRoleAndProfile: () -> (Result_2);
  getStudent: (principal) -> (Result_1);
  getTeacher: (principal) -> (Result);
  whoami: () -> (principal);
}
